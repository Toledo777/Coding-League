{
  "openapi": "3.0.0",
  "info": {
    "title": "Coding League's express APIs",
    "version": "0.1.0",
    "description": "This page contains information about our website and how our APIs are used used.",
    "license": {
      "name": "MIT",
      "url": "https://spdx.org/licenses/MIT.html"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Development server"
    },
    {
      "url": "https://codingleague.azurewebsites.net",
      "description": "Production server"
    },
    {
      "url": "https://codingleaguetesting.azurewebsites.net",
      "description": "Deployed testing server"
    }
  ],
  "paths": {
    "/auth/google-client-id": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Retrieve google client ID",
        "description": "Retrieve google client ID from environment variable for client-side to use google authentication.",
        "responses": {
          "200": {
            "description": "Return google client ID from environment",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "XXX-YYY.apps.googleusercontent.com"
                }
              }
            }
          },
          "404": {
            "description": "Returns error if client ID not found in environment",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "example": "google client ID not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Login the user to our site",
        "description": "Login the user by first verifying their Google token, inserting / updating their info into database, then set cookie session.",
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "description": "User's Google ID token for the route to verify and extract info from",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user's token is valid. The user is created or updated in the database. And the session is successfully generated."
          },
          "401": {
            "description": "Returns 401 error if either no token was provided in parameters, or the ticket is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "No Ticket in Query": {
                    "value": {
                      "error": "no token"
                    }
                  },
                  "Invalid token ID": {
                    "value": {
                      "error": "Google ticket invalid"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Returns 500 if errors occur during user creation process, or during session generation process.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "General User Creation Error": {
                    "value": {
                      "error": "Error on user creation"
                    }
                  },
                  "No User Found After Creation": {
                    "value": {
                      "error": "Could not find user after creating one"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/credentials": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Retrieve user session info",
        "description": "Retrieve user info that's contained inside the session. If the session doesn't exists return a value to indicate user not logged in",
        "responses": {
          "200": {
            "description": "Returns user values from session.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/auth/protected": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "verify user's authentication",
        "description": "Checks if user is in session. Used by client-side to restrict features to authenticated users only.",
        "responses": {
          "200": {
            "description": "User is in session and authentication. Allows to view content"
          },
          "401": {
            "description": "User is NOT in session, and NOT authentication. Not allowed to view content."
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "logout the user from our site",
        "description": "logout the user by clearing server session",
        "responses": {
          "200": {
            "description": "User successfully logged out."
          },
          "401": {
            "description": "User is not autenticated to do this action."
          },
          "500": {
            "description": "Error occur trying to destroy session."
          }
        }
      }
    },
    "/api/problem/random": {
      "get": {
        "tags": [
          "API"
        ],
        "summary": "retrieve random problem from DB",
        "description": "get random problem from a range between all of the problems in DB",
        "responses": {
          "200": {
            "description": "Either returns a problem or no problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Problem"
                }
              }
            }
          }
        }
      }
    },
    "/api/problem/list": {
      "get": {
        "tags": [
          "API"
        ],
        "summary": "Retrieves list of problems",
        "description": "Fetches number of problems starting at query start in DB's list of problems",
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "description": "starting index of the DB list to fetch",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "count",
            "description": "ending index of the DB list to fetch",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return list of problems fetched"
          }
        }
      }
    },
    "/api/problem/debug": {
      "post": {
        "tags": [
          "API"
        ],
        "summary": "Submit code to be ran by code-runner",
        "requestBody": {
          "description": "contains the problem's id and user submitted code",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "returns results outputted by code runner"
          }
        }
      }
    },
    "/api/allTags": {
      "get": {
        "tags": [
          "API"
        ],
        "summary": "Get all existing problem tags",
        "description": "Get json result containing string array of all possible coding problem tags. Used in react to populate the tag multiselect field in the filter component of the search page",
        "responses": {
          "200": {
            "description": "returns all the tags available for a problem",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "implementation",
                    "constructive algorithms",
                    "math",
                    "..."
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error if the json containing the problems is not available",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "tags unavailable"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/searchProblems": {
      "get": {
        "tags": [
          "API"
        ],
        "summary": "Retrieve problem based on user's query",
        "description": "Retrieve problems containing JSON array of titles and IDs of problems returned from Lyra Search.",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "limit on how many problems the API should search for.",
            "schema": {
              "type": "integer"
            },
            "example": 15
          },
          {
            "in": "query",
            "name": "search",
            "description": "user's string input for API to search for in DB",
            "schema": {
              "type": "string"
            },
            "example": "Apple"
          }
        ],
        "responses": {
          "200": {
            "description": "Return list of distinct results"
          },
          "400": {
            "description": "Error if the search param is missing"
          },
          "404": {
            "description": "Error if the search param input is empty"
          }
        }
      }
    },
    "/api/user": {
      "get": {
        "tags": [
          "API"
        ],
        "summary": "Retrieve specific user",
        "description": "Retrieve user in our database base on either email or username",
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "description": "user's email address",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "example@gmail.com"
          },
          {
            "in": "query",
            "name": "username",
            "description": "user's name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "John Doe"
          }
        ],
        "responses": {
          "200": {
            "description": "Respond with a user and all its info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Response with error if no queries are given",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "No parameter given"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Response with error if no user is found in database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "No data found with that username"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "example@outlook.com"
          },
          "username": {
            "type": "string",
            "example": "John Doe"
          },
          "avatar_uri": {
            "type": "string",
            "example": "https://lh3.googleusercontent.com/a-/AOh14GgR3T_470A9pQ9ivIgxdNbNn-dkKoQEhr71DRBKWA=s96-c"
          },
          "exp": {
            "type": "number",
            "example": 1500
          }
        }
      },
      "Problem": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "1234E"
          },
          "description": {
            "type": "string",
            "example": "Let's define pi(n) as the following permutation"
          },
          "inputSpecification": {
            "type": "string",
            "example": "The first line of the input contains two integers n and m"
          },
          "memoryLimit": {
            "type": "number",
            "example": 256
          },
          "notes": {
            "type": "string",
            "example": "Consider the first example"
          },
          "outputSpecification": {
            "type": "string",
            "example": "Print n integers f(p1(n)),f(p2(n)),…,f(pn(n))"
          },
          "sampleTests": {
            "type": "string",
            "example": "input 4 4 1 2 3 4 output 3 4 6 5"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "math",
              "2000"
            ]
          },
          "testCases": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "input": {
                  "type": "string",
                  "example": "44\\n 1 2 3 4"
                },
                "output": {
                  "type": "string",
                  "example": "3 4 6 5"
                }
              }
            }
          },
          "timeLimit": {
            "type": "integer",
            "example": 2
          },
          "title": {
            "type": "string",
            "example": "E. Special Permutation"
          },
          "url": {
            "type": "string",
            "example": "https://codeforces.com/problemset/problem/1234/E"
          }
        }
      },
      "userAnswer": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "example@outlook.com"
          },
          "problem_id": {
            "type": "string",
            "example": "1234E"
          },
          "submission": {
            "type": "string",
            "example": "console.log('hi');"
          },
          "pass_test": {
            "type": "boolean",
            "example": false
          }
        }
      }
    }
  }
}